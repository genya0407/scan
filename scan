#! /usr/bin/env ruby

require 'optparse'

class Format
  def self.build(template_string)
    self.new(template_string)
  end

  def initialize(template_string)
    @template_string = template_string
  end

  def render(params)
    parened_params = params.map { |k, v| ["{#{k}}", v] }.to_h
    @template_string.gsub(/\{(.+?)\}/) { |name| parened_params[name] }
  end
end

class Scanner
  attr_accessor :matcher, :output_format

  def self.build(args: ARGV, format_builder: Format)
    regex = nil
    delimiter = nil
    parser = OptionParser.new do |opts|
      opts.on('-p [PATTERN]', 'specify regexp') do |passed_regex|
        regex = passed_regex
      end
      opts.on('-d [DELIMITER]', 'specify delimiter') do |passed_delimiter|
        delimiter = passed_delimiter
      end
    end

    output_format = format_builder.build(parser.parse(args).join(' '))
    matcher = if regex
                RegexpMatcher.new(regexp: Regexp.compile(regex))
              elsif delimiter
                DelimiterMatcher.new(delimiter: delimiter)
              else
                DelimiterMatcher.new(delimiter: '\s+')
              end

    Scanner.new(matcher: matcher, output_format: output_format)
  end

  def initialize(matcher:, output_format:)
    self.matcher = matcher
    self.output_format = output_format
  end

  def scan(reader: $stdin, writer: $stdout)
    reader.read.lines.map(&:strip).each do |line|
      matched_data = matcher.match(line)
      next unless matched_data
      formatted_text = output_format.render(matched_data)
      writer.puts(formatted_text)
    end
  end
end

class DelimiterMatcher
  def initialize(delimiter:)
    @delimiter = delimiter
  end

  def match(line)
    format_params = {}
    [line, *line.split(@delimiter)].each.with_index do |capture, index|
      format_params[index] = capture
    end
    format_params
  end
end

class RegexpMatcher
  def initialize(regexp:)
    @regexp = regexp
  end

  def match(line)
    matched_data = @regexp.match(line)
    return unless matched_data
    format_params = {}
    matched_data.to_a.each.with_index do |capture, index|
      format_params[index] = capture
    end
    format_params.merge!(matched_data.named_captures)
  end
end

Scanner.build.scan